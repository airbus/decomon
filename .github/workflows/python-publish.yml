name: pypi

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: |
        python -m build
    - name: Upload as build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist
    - name: Publish package to TestPyPI (only for forks)
      env:
        TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
      if: github.repository != 'airbus/decomon' && env.TEST_PYPI_API_TOKEN != ''
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository_url: https://test.pypi.org/legacy/
    - name: Publish package to PyPI (main repo)
      env:
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      if: github.repository == 'airbus/decomon' && env.PYPI_API_TOKEN != ''
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  build-doc:
    runs-on: ubuntu-latest
    env:
      python-version: "3.9"
    steps:
      - name: Set env variables for github links in doc
        run: |
          # notebooks source repo and branch depending if it is a commit push or a PR
          if [[ $GITHUB_REF == refs/pull* ]];
          then
              AUTODOC_NOTEBOOKS_REPO_URL="${GITHUB_SERVER_URL}/${{ github.event.pull_request.head.repo.full_name }}"
              AUTODOC_NOTEBOOKS_BRANCH=${GITHUB_HEAD_REF}
          elif [[ $GITHUB_REF == refs/heads* ]];
          then
              AUTODOC_NOTEBOOKS_REPO_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}
              AUTODOC_NOTEBOOKS_BRANCH=${GITHUB_REF/refs\/heads\//}
          elif [[ $GITHUB_REF == refs/tags* ]];
          then
              AUTODOC_NOTEBOOKS_REPO_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}
              AUTODOC_NOTEBOOKS_BRANCH=${GITHUB_REF/refs\/tags\//}
          fi
          # export in GITHUB_ENV for next steps
          echo "AUTODOC_NOTEBOOKS_REPO_URL=${AUTODOC_NOTEBOOKS_REPO_URL}" >> $GITHUB_ENV
          echo "AUTODOC_NOTEBOOKS_BRANCH=${AUTODOC_NOTEBOOKS_BRANCH}" >> $GITHUB_ENV
          # check computed variables
          echo "Notebooks source: ${AUTODOC_NOTEBOOKS_REPO_URL}/tree/${AUTODOC_NOTEBOOKS_BRANCH}"
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}
          cache: "pip"
          cache-dependency-path: |
            pyproject.toml
            docs/requirements.txt
      - name: Install doc dependencies
        run: |
          python -m pip install -U pip setuptools
          pip install .
          pip install -r docs/requirements.txt
      - name: generate documentation
        run: |
          # move to documentation directory
          cd docs
          # generate api doc source files
          sphinx-apidoc -o source/api -f -T ../decomon
          # generate available notebooks list
          python generate_nb_index.py
          # build doc html pages
          sphinx-build -M html source build
          # specify it is a nojekyll site
          touch build/html/.nojekyll
      - name: upload as artifact
        uses: actions/upload-artifact@v3
        with:
          name: doc
          path: docs/build/html

  deploy-release-doc:
    # for release tags
    needs: [build-doc, deploy]
    runs-on: ubuntu-latest
    steps:
      - name: Get release version
        run: |
          # Infer release version from tag
          tag_name=${GITHUB_REF/refs\/tags\//}  # stripping "refs/tags/"
          release_version=${tag_name/v/}  # stripping an additional "v" if possible
          echo ${release_version}
          # Export to environment for later use
          echo "release_version=${release_version}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: doc
          path: docs/build/html
      - name: Deploy documentation in a version subfolder on GH pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: docs/build/html # The folder the action should deploy.
          target-folder: /${{ env.release_version }} # The folder the action should deploy to.
          commit-message: publish documentation for ${{ env.release_version }}

  update-doc-versions:
    # update doc versions index if the doc has been deployed
    needs: [deploy-release-doc]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: gh-pages
      - uses: actions/setup-python@v4
      - name: Generate versions.json
        shell: python3 {0}
        run: |
          import json
          from pathlib import Path

          cwd = Path.cwd()
          versions = sorted((item.name for item in cwd.iterdir()
                             if item.is_dir() and not item.name.startswith('.')),
                            reverse=True)
          target_dir = Path('gh-pages')
          target_dir.mkdir(parents=True)
          target_file = target_dir / 'versions.json'
          with target_file.open('w') as f:
              json.dump(versions, f)
      - name: Commit versions.json
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: gh-pages # The folder the action should deploy.
          target-folder: / # The folder the action should deploy to.
          commit-message: update versions.json
          clean: false  # do not remove other files (including whole doc versions)
